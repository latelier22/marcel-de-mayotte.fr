"use client";
import React, { useState, useRef, useEffect } from 'react';
import myFetch from '../../components/myFetch';
import EditorClient from './EditorClient';

function ListPosts({ allPosts }) {
    const [posts, setPosts] = useState(allPosts);
    const [selectedPost, setSelectedPost] = useState(null);
    const [editing, setEditing] = useState(false);
    const [editFormData, setEditFormData] = useState({ title: '', content: '', auteur: '', etat: 'brouillon' });
    const [newCommentData, setNewCommentData] = useState({ texte: '', auteur: '', etat: 'brouillon', parentPostId: null });
    const [error, setError] = useState('');
    const containerRef = useRef(null);
    const [creatingNew, setCreatingNew] = useState(false);
    const [lastModifiedPostId, setLastModifiedPostId] = useState(null);

    useEffect(() => {
        document.addEventListener("mousedown", handleClickOutside);
        return () => {
            document.removeEventListener("mousedown", handleClickOutside);
        };
    }, []);

    useEffect(() => {
        if (allPosts) {
            setPosts(groupPosts(allPosts));
        }
    }, [allPosts]);

    const groupPosts = (posts) => {
        const parentMap = {};
        posts.forEach(post => {
            const key = post.parentPostId ? post.parentPostId : post.id;
            if (!parentMap[key]) {
                parentMap[key] = [];
            }
            parentMap[key].push(post);
        });
        return Object.values(parentMap).flat();
    };

    const handleClickOutside = (event) => {
        if (containerRef.current && !containerRef.current.contains(event.target)) {
            setSelectedPost(null);
            setEditing(false);
            setCreatingNew(false);
        }
    };

    const handlePostClick = (post) => {
        setSelectedPost(post);
        setEditFormData({ title: post.title, content: post.content, auteur: post.auteur, etat: post.etat });
    };

    const handleEditPost = () => {
        setEditing(true);
    };

    const handleUpdatePost = async () => {
        if (!selectedPost) {
            setError('No post selected for updating.');
            return;
        }
        const payload = { data: editFormData };
        try {
            const response = await myFetch(`/api/posts/${selectedPost.id}`, 'PUT', payload);
            const updatedPost = { id: response.data.id, ...response.data.attributes };
            setPosts(posts.map(post => post.id === updatedPost.id ? { ...post, ...editFormData } : post));
            setEditing(false);
            setSelectedPost(null);
        } catch (error) {
            setError('Failed to update post due to a network error.');
        }
    };

    const handleAddComment = (parentPost) => {
        setNewCommentData({ texte: '', auteur: '', etat: 'brouillon', parentPostId: parentPost.id });
    };

    const handleDeletePost = async () => {
        if (!selectedPost) {
            setError('No post selected for deletion.');
            return;
        }
        try {
            await myFetch(`/api/posts/${selectedPost.id}`, 'DELETE');
            setPosts(posts.filter(post => post.id !== selectedPost.id));
            setSelectedPost(null);
        } catch (error) {
            setError('Failed to delete post due to a network error.');
        }
    };

    const handleCreateNewPost = async () => {
        if (!editFormData.title || !editFormData.content || !editFormData.auteur) {
            setError('Please fill all fields for the new post.');
            return;
        }
        const payload = { data: editFormData };
        try {
            const response = await myFetch('/api/posts', 'POST', payload);
            const newPost = { id: response.data.id, ...response.data.attributes };
            setPosts([...posts, newPost]);
            setLastModifiedPostId(newPost.id);
            setCreatingNew(false);
            setEditFormData({ title: '', content: '', auteur: '', etat: 'brouillon' });
        } catch (error) {
            setError('Failed to create new post due to a network error.');
        }
    };

    const renderButtons = (post) => {
        if (post === selectedPost && editing) {
            return (
                <div className="flex space-x-2">
                    <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={handleUpdatePost}>Save</button>
                    <button className="bg-red-500 text-white px-4 py-2 rounded" onClick={() => {
                        setEditing(false);
                        setSelectedPost(null);
                    }}>Cancel</button>
                </div>
            );
        } else if (post === selectedPost) {
            return (
                <div className="flex space-x-2">
                    <button className="bg-blue-500 text-white px-4 py-2 rounded" onClick={handleEditPost}>Edit</button>
                    <button className="bg-red-500 text-white px-4 py-2 rounded" onClick={handleDeletePost}>Delete</button>
                    <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={handleAddComment}>Add Comment</button>
                </div>
            );
        }
        return null;
    };

    const renderPostFamily = (post) => {
        return (
            <div key={post.id} className={`p-4 mb-4 ${post === selectedPost ? 'border-2 border-green-500' : ''}`}>
                {post === selectedPost && editing ? (
                    <div className="flex flex-col space-y-4">
                        <input
                            type="text"
                            placeholder="Title"
                            value={editFormData.title}
                            onChange={(e) => setEditFormData({ ...editFormData, title: e.target.value })}
                            className="p-2 border rounded"
                        />
                        <EditorClient
                            initialContent={editFormData.content}
                            onContentChange={(content) => setEditFormData({ ...editFormData, content })}
                        />
                        <input
                            type="text"
                            placeholder="Auteur"
                            value={editFormData.auteur}
                            onChange={(e) => setEditFormData({ ...editFormData, auteur: e.target.value })}
                            className="p-2 border rounded"
                        />
                        <div className="flex space-x-4">
                            <label>
                                <input
                                    type="radio"
                                    value="publiée"
                                    checked={editFormData.etat === "publiée"}
                                    onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                                /> Publiée
                            </label>
                            <label>
                                <input
                                    type="radio"
                                    value="brouillon"
                                    checked={editFormData.etat === "brouillon"}
                                    onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                                /> Brouillon
                            </label>
                        </div>
                        {renderButtons(post)}
                    </div>
                ) : (
                    <div className="bg-yellow-100 p-4 rounded">
                        <h2 className="text-center my-4">{post.title}</h2>
                        <div dangerouslySetInnerHTML={{ __html: formatContent(post.content, 200) }} />
                        <p className="text-right">- {post.auteur}</p>
                        <p className="text-right font-bold">{post.etat}</p>
                        {renderButtons(post)}
                    </div>
                )}
            </div>
        );
    };

    function formatContent(content, maxLength) {
        if (!content) return '';
        const words = content.split(' ');
        if (words.length > maxLength) {
            return words.slice(0, maxLength).join(' ') + '...';
        }
        return content;
    }

    return (
        <div ref={containerRef} className="container bg-yellow-100 text-red-900 mx-auto my-8 p-4 shadow-lg rounded">
            <button onClick={() => setCreatingNew(true)} className="bg-lime-500 px-4 py-2 rounded mb-4">Create New Post</button>
            {creatingNew && (
                <div className="flex flex-col space-y-4">
                    <input
                        type="text"
                        placeholder="Title"
                        value={editFormData.title}
                        onChange={(e) => setEditFormData({ ...editFormData, title: e.target.value })}
                        className="p-2 border rounded"
                    />
                    <EditorClient
                        initialContent={editFormData.content}
                        onContentChange={(content) => setEditFormData({ ...editFormData, content })}
                    />
                    <input
                        type="text"
                        placeholder="Auteur"
                        value={editFormData.auteur}
                        onChange={(e) => setEditFormData({ ...editFormData, auteur: e.target.value })}
                        className="p-2 border rounded"
                    />
<div className="flex space-x-4">
                        <label>
                            <input
                                type="radio"
                                value="publiée"
                                checked={editFormData.etat === "publiée"}
                                onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                            /> Publiée
                        </label>
                        <label>
                            <input
                                type="radio"
                                value="brouillon"
                                checked={editFormData.etat === "brouillon"}
                                onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                            /> Brouillon
                        </label>
                    </div>
                    <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={handleCreateNewPost}>Create</button>
                </div>
            )}
            {posts.map(post => (
                <div key={post.id} className={`p-4 mb-4 ${post === selectedPost ? 'border-2 border-green-500' : ''}`}>
                    {post === selectedPost && editing ? (
                        <div className="flex flex-col space-y-4">
                            <input
                                type="text"
                                placeholder="Title"
                                value={editFormData.title}
                                onChange={(e) => setEditFormData({ ...editFormData, title: e.target.value })}
                                className="p-2 border rounded"
                            />
                            <EditorClient
                                initialContent={editFormData.content}
                                onContentChange={(content) => setEditFormData({ ...editFormData, content })}
                            />
                            <input
                                type="text"
                                placeholder="Auteur"
                                value={editFormData.auteur}
                                onChange={(e) => setEditFormData({ ...editFormData, auteur: e.target.value })}
                                className="p-2 border rounded"
                            />
                            <div className="flex space-x-4">
                                <label>
                                    <input
                                        type="radio"
                                        value="publiée"
                                        checked={editFormData.etat === "publiée"}
                                        onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                                    /> Publiée
                                </label>
                                <label>
                                    <input
                                        type="radio"
                                        value="brouillon"
                                        checked={editFormData.etat === "brouillon"}
                                        onChange={(e) => setEditFormData({ ...editFormData, etat: e.target.value })}
                                    /> Brouillon
                                </label>
                            </div>
                            <div className="flex space-x-2">
                                <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={handleUpdatePost}>Save</button>
                                <button className="bg-red-500 text-white px-4 py-2 rounded" onClick={() => {
                                    setEditing(false);
                                    setSelectedPost(null);
                                }}>Cancel</button>
                            </div>
                        </div>
                    ) : (
                        <div className="bg-yellow-100 p-4 rounded">
                            <h2 className="text-center my-4">{post.title}</h2>
                            <div dangerouslySetInnerHTML={{ __html: formatContent(post.content, 200) }} />
                            <p className="text-right">- {post.auteur}</p>
                            <p className="text-right font-bold">{post.etat}</p>
                            <div className="flex space-x-2">
                                <button className="bg-blue-500 text-white px-4 py-2 rounded" onClick={handleEditPost}>Edit</button>
                                <button className="bg-red-500 text-white px-4 py-2 rounded" onClick={() => handleDeletePost(post)}>Delete</button>
                                <button className="bg-green-500 text-white px-4 py-2 rounded" onClick={() => handleAddComment(post)}>Add Comment</button>
                            </div>
                        </div>
                    )}
                </div>
            ))}
            {error && <p className="text-red-500">{error}</p>}
        </div>
    );
}

export default ListPosts;